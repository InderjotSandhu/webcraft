import { promises as fs } from 'fs'
import path from 'path'

export interface TemplateAssets {
  html: string
  css?: string
  js?: string
  images?: { [key: string]: string }
}

export interface TemplateConfig {
  id: string
  name: string
  category: string
  assets: TemplateAssets
  fields: Array<{
    name: string
    type: string
    required: boolean
  }>
}

export class TemplateEngine {
  private projectId: string
  private outputDir: string

  constructor(projectId: string) {
    this.projectId = projectId
    this.outputDir = path.join(process.cwd(), 'generated', projectId)
  }

  /**
   * Process template with user data and generate complete website
   */
  async processTemplate(
    template: TemplateConfig,
    formData: Record<string, string>
  ): Promise<string> {
    try {
      // Create output directory
      await fs.mkdir(this.outputDir, { recursive: true })

      // Process HTML template
      const processedHtml = this.replaceTemplatePlaceholders(template.assets.html, formData)
      
      // Generate additional CSS if needed
      const additionalCss = this.generateDynamicCSS(formData)
      const fullCss = template.assets.css ? 
        `${template.assets.css}\n\n/* Dynamic Styles */\n${additionalCss}` : 
        additionalCss

      // Save CSS file if exists
      if (fullCss) {
        await fs.writeFile(
          path.join(this.outputDir, 'styles.css'),
          fullCss,
          'utf8'
        )
      }

      // Save JavaScript file if exists
      if (template.assets.js) {
        await fs.writeFile(
          path.join(this.outputDir, 'script.js'),
          template.assets.js,
          'utf8'
        )
      }

      // Create enhanced HTML with proper structure
      const finalHtml = this.wrapWithBoilerplate(processedHtml, {
        title: formData.full_name ? `${formData.full_name} - Portfolio` : 'My Website',
        description: formData.bio || 'My professional website built with WebCraft',
        hasCss: !!fullCss,
        hasJs: !!template.assets.js
      })

      // Save main HTML file
      await fs.writeFile(
        path.join(this.outputDir, 'index.html'),
        finalHtml,
        'utf8'
      )

      // Generate metadata file for the website
      await this.generateMetadata(template, formData)

      return `/generated/${this.projectId}/index.html`

    } catch (error) {
      console.error('Template processing error:', error)
      throw new Error('Failed to process template')
    }
  }

  /**
   * Replace template placeholders with user data
   */
  private replaceTemplatePlaceholders(
    template: string,
    data: Record<string, string>
  ): string {
    let processed = template

    // Handle conditional blocks {{#if field}}...{{/if}}
    processed = processed.replace(
      /\{\{#if\s+(\w+)\}\}([\s\S]*?)\{\{\/if\}\}/g,
      (match, field, content) => {
        return data[field] && data[field].trim() ? content : ''
      }
    )

    // Handle each loops {{#each field}}...{{/each}} for comma-separated values
    processed = processed.replace(
      /\{\{#each\s+(\w+)\}\}([\s\S]*?)\{\{\/each\}\}/g,
      (match, field, itemTemplate) => {
        if (!data[field] || !data[field].trim()) return ''
        
        const items = data[field].split(',').map(item => item.trim()).filter(Boolean)
        return items.map(item => 
          itemTemplate.replace(/\{\{this\}\}/g, item)
        ).join('')
      }
    )

    // Handle simple replacements {{field}}
    processed = processed.replace(/\{\{(\w+)\}\}/g, (match, field) => {
      if (field === 'full_name_initial' && data.full_name) {
        return data.full_name.charAt(0).toUpperCase()
      }
      return data[field] || ''
    })

    return processed
  }

  /**
   * Generate dynamic CSS based on user preferences
   */
  private generateDynamicCSS(formData: Record<string, string>): string {
    let css = `
/* Dynamic styles generated by WebCraft */
:root {
  --primary-color: #667eea;
  --secondary-color: #764ba2;
  --text-color: #333;
  --bg-color: #ffffff;
}

body {
  scroll-behavior: smooth;
}

.fade-in {
  animation: fadeIn 0.6s ease-in-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.hover-lift {
  transition: transform 0.2s ease;
}

.hover-lift:hover {
  transform: translateY(-2px);
}

/* Responsive improvements */
@media (max-width: 768px) {
  .container {
    padding: 0 15px;
  }
  
  h1 {
    font-size: 1.8rem !important;
  }
  
  .section {
    padding: 1.5rem !important;
  }
}
`

    // Add theme variations based on category or user preferences
    if (formData.theme_color) {
      css += `
:root {
  --primary-color: ${formData.theme_color};
}
`
    }

    return css
  }

  /**
   * Wrap processed content with proper HTML boilerplate
   */
  private wrapWithBoilerplate(
    content: string,
    options: {
      title: string
      description: string
      hasCss: boolean
      hasJs: boolean
    }
  ): string {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="${options.description}">
    <meta name="generator" content="WebCraft">
    <title>${options.title}</title>
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:title" content="${options.title}">
    <meta property="og:description" content="${options.description}">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:title" content="${options.title}">
    <meta property="twitter:description" content="${options.description}">
    
    ${options.hasCss ? '<link rel="stylesheet" href="./styles.css">' : ''}
    
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        /* Critical inline styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
        }
        
        .loading {
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out 0.1s forwards;
        }
        
        @keyframes fadeIn {
            to { opacity: 1; }
        }
    </style>
</head>
<body class="loading">
    ${content}
    
    <!-- WebCraft Attribution -->
    <div style="position: fixed; bottom: 10px; right: 10px; font-size: 10px; color: #999; z-index: 1000;">
        Built with <a href="#" style="color: #667eea; text-decoration: none;">WebCraft</a>
    </div>
    
    ${options.hasJs ? '<script src="./script.js"></script>' : ''}
    
    <!-- Analytics placeholder -->
    <script>
        // WebCraft analytics placeholder
        console.log('Website built with WebCraft');
        
        // Add smooth scroll behavior
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    </script>
</body>
</html>`
  }

  /**
   * Generate metadata file for the website
   */
  private async generateMetadata(
    template: TemplateConfig,
    formData: Record<string, string>
  ): Promise<void> {
    const metadata = {
      generated: new Date().toISOString(),
      template: {
        id: template.id,
        name: template.name,
        category: template.category
      },
      content: {
        title: formData.full_name || 'My Website',
        description: formData.bio || 'My professional website',
        author: formData.full_name || 'Anonymous'
      },
      webcraft: {
        version: '1.0',
        generator: 'WebCraft Template Engine'
      }
    }

    await fs.writeFile(
      path.join(this.outputDir, 'metadata.json'),
      JSON.stringify(metadata, null, 2),
      'utf8'
    )
  }

  /**
   * Get project statistics
   */
  async getProjectStats(): Promise<{
    files: number
    totalSize: number
    generatedAt: string
  }> {
    try {
      const files = await fs.readdir(this.outputDir)
      let totalSize = 0

      for (const file of files) {
        const stats = await fs.stat(path.join(this.outputDir, file))
        totalSize += stats.size
      }

      return {
        files: files.length,
        totalSize,
        generatedAt: new Date().toISOString()
      }
    } catch (error) {
      return {
        files: 0,
        totalSize: 0,
        generatedAt: new Date().toISOString()
      }
    }
  }
}
